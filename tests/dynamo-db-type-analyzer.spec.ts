import assert from "node:assert";

import test, { describe } from "node:test";

import { DynamoDB } from "@aws-sdk/client-dynamodb";
import { DynamoDBTypeAnalyzer } from "../src/dynamo-db/dynamo-db-type-analyzer";

// Manual mock for DynamoDB scan method
class MockDynamoDB extends DynamoDB {
    scan(params: any): Promise<any> {
        return Promise.resolve({ Items: [], LastEvaluatedKey: undefined });
    }
}

const expectedFallbacks: Record<string, string> = {
    B: "B",
    BOOL: "BOOL",
    "BOOL,BS": "M",
    "BOOL,L": "M",
    "BOOL,L,BS": "M",
    "BOOL,L,NS": "M",
    "BOOL,L,NS,BS": "M",
    "BOOL,L,NULL": "M",
    "BOOL,L,NULL,BS": "M",
    "BOOL,L,NULL,NS": "M",
    "BOOL,L,NULL,SS": "M",
    "BOOL,L,SS": "M",
    "BOOL,L,SS,BS": "M",
    "BOOL,L,SS,NS": "M",
    "BOOL,M": "M",
    "BOOL,M,BS": "M",
    "BOOL,M,L": "M",
    "BOOL,M,L,BS": "M",
    "BOOL,M,L,NS": "M",
    "BOOL,M,L,NULL": "M",
    "BOOL,M,L,SS": "M",
    "BOOL,M,NS": "M",
    "BOOL,M,NS,BS": "M",
    "BOOL,M,NULL": "M",
    "BOOL,M,NULL,BS": "M",
    "BOOL,M,NULL,NS": "M",
    "BOOL,M,NULL,SS": "M",
    "BOOL,M,SS": "M",
    "BOOL,M,SS,BS": "M",
    "BOOL,M,SS,NS": "M",
    "BOOL,NS": "M",
    "BOOL,NS,BS": "M",
    "BOOL,NULL": "BOOL",
    "BOOL,NULL,BS": "M",
    "BOOL,NULL,NS": "M",
    "BOOL,NULL,NS,BS": "M",
    "BOOL,NULL,SS": "M",
    "BOOL,NULL,SS,BS": "M",
    "BOOL,NULL,SS,NS": "M",
    "BOOL,SS": "M",
    "BOOL,SS,BS": "M",
    "BOOL,SS,NS": "M",
    "BOOL,SS,NS,BS": "M",
    BS: "M",
    "B,BOOL": "S",
    "B,BOOL,BS": "M",
    "B,BOOL,L": "M",
    "B,BOOL,L,BS": "M",
    "B,BOOL,L,NS": "M",
    "B,BOOL,L,NULL": "M",
    "B,BOOL,L,SS": "M",
    "B,BOOL,M": "M",
    "B,BOOL,M,BS": "M",
    "B,BOOL,M,L": "M",
    "B,BOOL,M,NS": "M",
    "B,BOOL,M,NULL": "M",
    "B,BOOL,M,SS": "M",
    "B,BOOL,NS": "M",
    "B,BOOL,NS,BS": "M",
    "B,BOOL,NULL": "S",
    "B,BOOL,NULL,BS": "M",
    "B,BOOL,NULL,NS": "M",
    "B,BOOL,NULL,SS": "M",
    "B,BOOL,SS": "M",
    "B,BOOL,SS,BS": "M",
    "B,BOOL,SS,NS": "M",
    "B,BS": "M",
    "B,L": "M",
    "B,L,BS": "M",
    "B,L,NS": "M",
    "B,L,NS,BS": "M",
    "B,L,NULL": "M",
    "B,L,NULL,BS": "M",
    "B,L,NULL,NS": "M",
    "B,L,NULL,SS": "M",
    "B,L,SS": "M",
    "B,L,SS,BS": "M",
    "B,L,SS,NS": "M",
    "B,M": "M",
    "B,M,BS": "M",
    "B,M,L": "M",
    "B,M,L,BS": "M",
    "B,M,L,NS": "M",
    "B,M,L,NULL": "M",
    "B,M,L,SS": "M",
    "B,M,NS": "M",
    "B,M,NS,BS": "M",
    "B,M,NULL": "M",
    "B,M,NULL,BS": "M",
    "B,M,NULL,NS": "M",
    "B,M,NULL,SS": "M",
    "B,M,SS": "M",
    "B,M,SS,BS": "M",
    "B,M,SS,NS": "M",
    "B,NS": "M",
    "B,NS,BS": "M",
    "B,NULL": "B",
    "B,NULL,BS": "M",
    "B,NULL,NS": "M",
    "B,NULL,NS,BS": "M",
    "B,NULL,SS": "M",
    "B,NULL,SS,BS": "M",
    "B,NULL,SS,NS": "M",
    "B,SS": "M",
    "B,SS,BS": "M",
    "B,SS,NS": "M",
    "B,SS,NS,BS": "M",
    L: "M",
    "L,BS": "M",
    "L,NS": "M",
    "L,NS,BS": "M",
    "L,NULL": "M",
    "L,NULL,BS": "M",
    "L,NULL,NS": "M",
    "L,NULL,NS,BS": "M",
    "L,NULL,SS": "M",
    "L,NULL,SS,BS": "M",
    "L,NULL,SS,NS": "M",
    "L,SS": "M",
    "L,SS,BS": "M",
    "L,SS,NS": "M",
    "L,SS,NS,BS": "M",
    M: "M",
    "M,BS": "M",
    "M,L": "M",
    "M,L,BS": "M",
    "M,L,NS": "M",
    "M,L,NS,BS": "M",
    "M,L,NULL": "M",
    "M,L,NULL,BS": "M",
    "M,L,NULL,NS": "M",
    "M,L,NULL,SS": "M",
    "M,L,SS": "M",
    "M,L,SS,BS": "M",
    "M,L,SS,NS": "M",
    "M,NS": "M",
    "M,NS,BS": "M",
    "M,NULL": "M",
    "M,NULL,BS": "M",
    "M,NULL,NS": "M",
    "M,NULL,NS,BS": "M",
    "M,NULL,SS": "M",
    "M,NULL,SS,BS": "M",
    "M,NULL,SS,NS": "M",
    "M,SS": "M",
    "M,SS,BS": "M",
    "M,SS,NS": "M",
    "M,SS,NS,BS": "M",
    N: "N",
    NS: "M",
    "NS,BS": "M",
    "NULL,BS": "M",
    "NULL,NS": "M",
    "NULL,NS,BS": "M",
    "NULL,SS": "M",
    "NULL,SS,BS": "M",
    "NULL,SS,NS": "M",
    "NULL,SS,NS,BS": "M",
    "N,B": "S",
    "N,BOOL": "N",
    "N,BOOL,BS": "M",
    "N,BOOL,L": "M",
    "N,BOOL,L,BS": "M",
    "N,BOOL,L,NS": "M",
    "N,BOOL,L,NULL": "M",
    "N,BOOL,L,SS": "M",
    "N,BOOL,M": "M",
    "N,BOOL,M,BS": "M",
    "N,BOOL,M,L": "M",
    "N,BOOL,M,NS": "M",
    "N,BOOL,M,NULL": "M",
    "N,BOOL,M,SS": "M",
    "N,BOOL,NS": "M",
    "N,BOOL,NS,BS": "M",
    "N,BOOL,NULL": "N",
    "N,BOOL,NULL,BS": "M",
    "N,BOOL,NULL,NS": "M",
    "N,BOOL,NULL,SS": "M",
    "N,BOOL,SS": "M",
    "N,BOOL,SS,BS": "M",
    "N,BOOL,SS,NS": "M",
    "N,BS": "M",
    "N,B,BOOL": "S",
    "N,B,BOOL,BS": "M",
    "N,B,BOOL,L": "M",
    "N,B,BOOL,M": "M",
    "N,B,BOOL,NS": "M",
    "N,B,BOOL,NULL": "S",
    "N,B,BOOL,SS": "M",
    "N,B,BS": "M",
    "N,B,L": "M",
    "N,B,L,BS": "M",
    "N,B,L,NS": "M",
    "N,B,L,NULL": "M",
    "N,B,L,SS": "M",
    "N,B,M": "M",
    "N,B,M,BS": "M",
    "N,B,M,L": "M",
    "N,B,M,NS": "M",
    "N,B,M,NULL": "M",
    "N,B,M,SS": "M",
    "N,B,NS": "M",
    "N,B,NS,BS": "M",
    "N,B,NULL": "S",
    "N,B,NULL,BS": "M",
    "N,B,NULL,NS": "M",
    "N,B,NULL,SS": "M",
    "N,B,SS": "M",
    "N,B,SS,BS": "M",
    "N,B,SS,NS": "M",
    "N,L": "M",
    "N,L,BS": "M",
    "N,L,NS": "M",
    "N,L,NS,BS": "M",
    "N,L,NULL": "M",
    "N,L,NULL,BS": "M",
    "N,L,NULL,NS": "M",
    "N,L,NULL,SS": "M",
    "N,L,SS": "M",
    "N,L,SS,BS": "M",
    "N,L,SS,NS": "M",
    "N,M": "M",
    "N,M,BS": "M",
    "N,M,L": "M",
    "N,M,L,BS": "M",
    "N,M,L,NS": "M",
    "N,M,L,NULL": "M",
    "N,M,L,SS": "M",
    "N,M,NS": "M",
    "N,M,NS,BS": "M",
    "N,M,NULL": "M",
    "N,M,NULL,BS": "M",
    "N,M,NULL,NS": "M",
    "N,M,NULL,SS": "M",
    "N,M,SS": "M",
    "N,M,SS,BS": "M",
    "N,M,SS,NS": "M",
    "N,NS": "M",
    "N,NS,BS": "M",
    "N,NULL": "N",
    "N,NULL,BS": "M",
    "N,NULL,NS": "M",
    "N,NULL,NS,BS": "M",
    "N,NULL,SS": "M",
    "N,NULL,SS,BS": "M",
    "N,NULL,SS,NS": "M",
    "N,SS": "M",
    "N,SS,BS": "M",
    "N,SS,NS": "M",
    "N,SS,NS,BS": "M",
    S: "S",
    SS: "M",
    "SS,BS": "M",
    "SS,NS": "M",
    "SS,NS,BS": "M",
    "S,B": "S",
    "S,BOOL": "S",
    "S,BOOL,BS": "M",
    "S,BOOL,L": "M",
    "S,BOOL,L,BS": "M",
    "S,BOOL,L,NS": "M",
    "S,BOOL,L,NULL": "M",
    "S,BOOL,L,SS": "M",
    "S,BOOL,M": "M",
    "S,BOOL,M,BS": "M",
    "S,BOOL,M,L": "M",
    "S,BOOL,M,NS": "M",
    "S,BOOL,M,NULL": "M",
    "S,BOOL,M,SS": "M",
    "S,BOOL,NS": "M",
    "S,BOOL,NS,BS": "M",
    "S,BOOL,NULL": "S",
    "S,BOOL,NULL,BS": "M",
    "S,BOOL,NULL,NS": "M",
    "S,BOOL,NULL,SS": "M",
    "S,BOOL,SS": "M",
    "S,BOOL,SS,BS": "M",
    "S,BOOL,SS,NS": "M",
    "S,BS": "M",
    "S,B,BOOL": "S",
    "S,B,BOOL,BS": "M",
    "S,B,BOOL,L": "M",
    "S,B,BOOL,M": "M",
    "S,B,BOOL,NS": "M",
    "S,B,BOOL,NULL": "S",
    "S,B,BOOL,SS": "M",
    "S,B,BS": "M",
    "S,B,L": "M",
    "S,B,L,BS": "M",
    "S,B,L,NS": "M",
    "S,B,L,NULL": "M",
    "S,B,L,SS": "M",
    "S,B,M": "M",
    "S,B,M,BS": "M",
    "S,B,M,L": "M",
    "S,B,M,NS": "M",
    "S,B,M,NULL": "M",
    "S,B,M,SS": "M",
    "S,B,NS": "M",
    "S,B,NS,BS": "M",
    "S,B,NULL": "S",
    "S,B,NULL,BS": "M",
    "S,B,NULL,NS": "M",
    "S,B,NULL,SS": "M",
    "S,B,SS": "M",
    "S,B,SS,BS": "M",
    "S,B,SS,NS": "M",
    "S,L": "M",
    "S,L,BS": "M",
    "S,L,NS": "M",
    "S,L,NS,BS": "M",
    "S,L,NULL": "M",
    "S,L,NULL,BS": "M",
    "S,L,NULL,NS": "M",
    "S,L,NULL,SS": "M",
    "S,L,SS": "M",
    "S,L,SS,BS": "M",
    "S,L,SS,NS": "M",
    "S,M": "M",
    "S,M,BS": "M",
    "S,M,L": "M",
    "S,M,L,BS": "M",
    "S,M,L,NS": "M",
    "S,M,L,NULL": "M",
    "S,M,L,SS": "M",
    "S,M,NS": "M",
    "S,M,NS,BS": "M",
    "S,M,NULL": "M",
    "S,M,NULL,BS": "M",
    "S,M,NULL,NS": "M",
    "S,M,NULL,SS": "M",
    "S,M,SS": "M",
    "S,M,SS,BS": "M",
    "S,M,SS,NS": "M",
    "S,N": "S",
    "S,NS": "M",
    "S,NS,BS": "M",
    "S,NULL": "S",
    "S,NULL,BS": "M",
    "S,NULL,NS": "M",
    "S,NULL,NS,BS": "M",
    "S,NULL,SS": "M",
    "S,NULL,SS,BS": "M",
    "S,NULL,SS,NS": "M",
    "S,N,B": "S",
    "S,N,BOOL": "S",
    "S,N,BOOL,BS": "M",
    "S,N,BOOL,L": "M",
    "S,N,BOOL,M": "M",
    "S,N,BOOL,NS": "M",
    "S,N,BOOL,NULL": "S",
    "S,N,BOOL,SS": "M",
    "S,N,BS": "M",
    "S,N,B,BOOL": "S",
    "S,N,B,BS": "M",
    "S,N,B,L": "M",
    "S,N,B,M": "M",
    "S,N,B,NS": "M",
    "S,N,B,NULL": "S",
    "S,N,B,SS": "M",
    "S,N,L": "M",
    "S,N,L,BS": "M",
    "S,N,L,NS": "M",
    "S,N,L,NULL": "M",
    "S,N,L,SS": "M",
    "S,N,M": "M",
    "S,N,M,BS": "M",
    "S,N,M,L": "M",
    "S,N,M,NS": "M",
    "S,N,M,NULL": "M",
    "S,N,M,SS": "M",
    "S,N,NS": "M",
    "S,N,NS,BS": "M",
    "S,N,NULL": "S",
    "S,N,NULL,BS": "M",
    "S,N,NULL,NS": "M",
    "S,N,NULL,SS": "M",
    "S,N,SS": "M",
    "S,N,SS,BS": "M",
    "S,N,SS,NS": "M",
    "S,SS": "M",
    "S,SS,BS": "M",
    "S,SS,NS": "M",
    "S,SS,NS,BS": "M",
};

describe("DynamoDBTypeAnalyzer", () => {
    test("DynamoDBTypeAnalyzer - should correctly identify attribute types", () => {
        const analyzer = new (DynamoDBTypeAnalyzer as any)(null);

        assert.strictEqual(analyzer.getAttributeType({ S: "string" }), "S");
        assert.strictEqual(analyzer.getAttributeType({ N: "123" }), "N");
        assert.strictEqual(analyzer.getAttributeType({ B: "binary" }), "B");
        assert.strictEqual(analyzer.getAttributeType({ SS: ["string1", "string2"] }), "SS");
        assert.strictEqual(analyzer.getAttributeType({ NS: ["1", "2"] }), "NS");
        assert.strictEqual(analyzer.getAttributeType({ BS: ["binary1", "binary2"] }), "BS");
        assert.strictEqual(analyzer.getAttributeType({ M: {} }), "M");
        assert.strictEqual(analyzer.getAttributeType({ L: [] }), "L");
        assert.strictEqual(analyzer.getAttributeType({ NULL: true }), "NULL");
        assert.strictEqual(analyzer.getAttributeType({ BOOL: true }), "BOOL");
    });

    test("DynamoDBTypeAnalyzer - fallback type tests", async (t) => {
        const typeAnalyzer = new DynamoDBTypeAnalyzer(new MockDynamoDB());

        for (const [types, expectedFallback] of Object.entries(expectedFallbacks)) {
            await t.test(`should return ${expectedFallback} for types ${types}`, async () => {
                const attributes = types.split(",");

                const analyzedType = typeAnalyzer.getFallbackType(attributes);

                assert.strictEqual(analyzedType, expectedFallback, `Failed for types: ${types}, sorted: ${ attributes.sort() }`);
            });
        }
    });

    test("DynamoDBTypeAnalyzer - should correctly map detected types to database types", () => {
        const analyzer = new (DynamoDBTypeAnalyzer as any)(null);

        assert.strictEqual(analyzer.mapToDatabaseType("S"), "STRING");
        assert.strictEqual(analyzer.mapToDatabaseType("N"), "NUMBER");
        assert.strictEqual(analyzer.mapToDatabaseType("B"), "BINARY");
        assert.strictEqual(analyzer.mapToDatabaseType("BOOL"), "BOOLEAN");
        assert.strictEqual(analyzer.mapToDatabaseType("M"), "OBJECT");
        assert.strictEqual(analyzer.mapToDatabaseType("L"), "ARRAY");
        assert.strictEqual(analyzer.mapToDatabaseType("NULL"), "NULL");
        assert.strictEqual(analyzer.mapToDatabaseType("SS"), "STRING_SET");
        assert.strictEqual(analyzer.mapToDatabaseType("NS"), "NUMBER_SET");
        assert.strictEqual(analyzer.mapToDatabaseType("BS"), "BINARY_SET");
    });

    test("DynamoDBTypeAnalyzer - should scan table and determine final attribute types", async () => {
        const mockDynamoDBClient = new MockDynamoDB();
        mockDynamoDBClient.scan = async () => ({
            Items: [
                { attr1: { S: "string" }, attr2: { N: "123" } },
                { attr1: { S: "another string" }, attr2: { BOOL: true } },
            ],
            LastEvaluatedKey: undefined,
        });

        const analyzer = new DynamoDBTypeAnalyzer(mockDynamoDBClient as unknown as DynamoDB);

        await analyzer.scanTable("test-table");

        const expectedAttributeTypes = {
            attr1: "STRING",
            attr2: "NUMBER",
        };

        assert.deepStrictEqual(analyzer.getFinalAttributeTypes(), expectedAttributeTypes);
    });
});
